#!/usr/bin/env python3

import argparse

ap = argparse.ArgumentParser()
ap.add_argument('--configfile')
ap.add_argument('time')
ap.add_argument('message', nargs='*', default='Timer')
args = ap.parse_args()

if isinstance(args.message, list):
    args.message = ' '.join(args.message)

# "time" can be:
# A fixed time (in the next 24 hours):
#   20:15
#   20:15:03
#
# A time span
#   10min
#   10m
#   15s
#   1h10m30s
#   3d

import re, datetime, subprocess, configparser, shlex, os.path

re_date = r'(?:\d\d\d\d-)?\d\d-\d\d'
re_time = r'\d\d?:\d\d(?::\d\d)?'
re_intervalls = r'(?:\d+(?:[smhd]|min|) *)+'
re_timespec = '(?:' + re_intervalls + '|' + re_time + ')'

def parse_delay(s):
    mo_time = re.search('^' + re_time + '$', s)
    mo_intervalls = re.search('^' + re_intervalls + '$', s)

    if mo_time is not None:
        tstr = mo_time.group()
        if len(tstr) == 4:
            tstr = '0' + tstr
        if len(tstr) == 7:
            tstr = '0' + tstr

        if len(tstr) == 5:
            t = datetime.datetime.strptime(mo_time.group(), '%H:%M').time()
        elif len(tstr) == 8:
            t = datetime.datetime.strptime(mo_time.group(), '%H:%M:%S').time()
        d = datetime.date.today()
        target = datetime.datetime.combine(d, t)
        if target < datetime.datetime.now():
            target = datetime.datetime.combine(d + datetime.timedelta(days=1), t)
        return target
    elif mo_intervalls is not None:
        target = datetime.datetime.now()
        for inter in re.split(r'(\d+[^\d]*)', mo_intervalls.group()):
            if inter == '':
                continue
            parts = re.split(r'(\d+)', inter)
            if parts and parts[0] == '':
                del parts[0]
            num = int(parts[0])
            unit = parts[1] if len(parts) > 1 else 'm'
            if unit in ('s',):
                target += datetime.timedelta(seconds=num)
            elif unit in ('m', 'min'):
                target += datetime.timedelta(minutes=num)
            elif unit in ('h',):
                target += datetime.timedelta(hours=num)
            elif unit in ('d',):
                target += datetime.timedelta(days=num)
            else:
                raise ValueError("unknown intervall unit")
        return target
    else:
        raise ValueError("parse error")

targettime = parse_delay(args.time)

conf = configparser.RawConfigParser()
conf.read(['/etc/timer.conf', os.path.expanduser('~/.config/timer.conf')])
if args.configfile is not None:
    conf.read(args.configfile)
message_fmt = conf.get('timer', 'message', fallback='[{datetime:%H:%M}] | {message}')
notify_fmt = conf.get('timer', 'notify', fallback='notify-send -u critical "{message}"')
notify_cmd_fmt = shlex.split(notify_fmt)

# Fork and daemonize
import os, sys
if os.fork() != 0:
    sys.exit(0)
os.setsid()

import time
delay = targettime - datetime.datetime.now()
if delay > datetime.timedelta(seconds=0):
    time.sleep(delay.total_seconds())
message = message_fmt.format(datetime=targettime, message=args.message)
subprocess.run([arg.format(message=message) for arg in notify_cmd_fmt])
