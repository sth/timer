#!/usr/bin/env python3

import argparse
import typing as t


class Args(t.Protocol):
    quiet: bool
    foreground: bool
    configfile: t.Optional[str]
    time: str
    message: t.Union[list[str], str]


ap = argparse.ArgumentParser()
ap.add_argument("--quiet", "-q", action="store_true", help="Don't show shedule message")
ap.add_argument("--foreground", "-f", action="store_true", help="Don't background process")
ap.add_argument("--configfile", help="Use this config file")
ap.add_argument("time", help="Time intervall or fixed target time. For example '1h20m'")
ap.add_argument(
    "message", nargs="*", default="Timer", help="Notification message to show"
)
args = t.cast(Args, ap.parse_args())

if isinstance(args.message, list):
    args.message = " ".join(args.message)

# "time" can be:
# A fixed time (in the next 24 hours):
#   20:15
#   20:15:03
#
# A time span
#   10min
#   10m
#   15s
#   1h10m30s
#   3d

import re, datetime, time, subprocess, configparser, shlex, os.path, sys

re_date = r"(?:\d\d\d\d-)?\d\d-\d\d"
re_time = r"\d\d?:\d\d(?::\d\d)?"
re_intervalls = r"(?:\d+(?:[smhd]|min|ms|) *)+"
re_timespec = "(?:" + re_intervalls + "|" + re_time + ")"


def parse_delay(s: str) -> datetime.datetime:
    mo_time = re.search("^" + re_time + "$", s)
    mo_intervalls = re.search("^" + re_intervalls + "$", s)

    if mo_time is not None:
        tstr = mo_time.group()
        if len(tstr) == 4:
            tstr = "0" + tstr
        if len(tstr) == 7:
            tstr = "0" + tstr

        if len(tstr) == 5:
            t = datetime.datetime.strptime(mo_time.group(), "%H:%M").time()
        elif len(tstr) == 8:
            t = datetime.datetime.strptime(mo_time.group(), "%H:%M:%S").time()
        d = datetime.date.today()
        target = datetime.datetime.combine(d, t)
        if target < datetime.datetime.now():
            target = datetime.datetime.combine(d + datetime.timedelta(days=1), t)
        return target
    elif mo_intervalls is not None:
        target = datetime.datetime.now()
        for inter in re.split(r"(\d+[^\d]*)", mo_intervalls.group()):
            if inter == "":
                continue
            parts = re.split(r"(\d+)", inter)
            if parts and parts[0] == "":
                del parts[0]
            num = int(parts[0])
            unit = parts[1] if len(parts) > 1 else "m"
            if unit in ("ms",):
                target += datetime.timedelta(seconds=num / 1000.0)
            elif unit in ("s",):
                target += datetime.timedelta(seconds=num)
            elif unit in ("m", "min"):
                target += datetime.timedelta(minutes=num)
            elif unit in ("h",):
                target += datetime.timedelta(hours=num)
            elif unit in ("d",):
                target += datetime.timedelta(days=num)
            else:
                raise ValueError("unknown interval unit: %s" % unit)
        return target
    else:
        raise ValueError("parse error")


def sleep_until(target_time):
    # Sleep until a certain time.
    # Using time.sleep() has pitfalls:
    # - calls to time.sleep() return early on signals
    # - calls to time.sleep() continue sleeping past the desired time
    #   if the computer was in standy mode during the sleep. (It sleeps
    #   for a certain *computer run time*, not *real time*).
    # We use two strategies to work around this:
    # - check after each time.sleep() if we want to sleep more
    # - only sleep short intervals to make sure we don't "oversleep" by
    #   much

    # Generally for shorter sleeps more precision is required than for longer
    # ones. We try not to oversleep for longer than 1/60th of the specified
    # interval.
    full_delta = target_time - datetime.datetime.now()
    sleep_limit = full_delta / 60

    # We are generally ok with an oversleep of one seconds and want to never
    # oversleep for more than a minute.
    oversleep_limit_low = datetime.timedelta(seconds=1)
    oversleep_limit_high = datetime.timedelta(seconds=60)

    if sleep_limit < oversleep_limit_low:
        sleep_limit = min(full_delta, oversleep_limit_low)
    if sleep_limit > oversleep_limit_high:
        sleep_limit = oversleep_limit_high

    # Loop until we reach out target time
    while True:
        delta = target_time - datetime.datetime.now()
        if delta < datetime.timedelta(seconds=0):
            break
        if delta > sleep_limit:
            delta = sleep_limit
        time.sleep(delta.total_seconds())


try:
    notify_time = parse_delay(args.time)
except ValueError as err:
    print("invalid target time value: %s" % err, file=sys.stderr)
    sys.exit(1)

conf = configparser.RawConfigParser()
conf.read(["/etc/timer.conf", os.path.expanduser("~/.config/timer.conf")])
if args.configfile is not None:
    conf.read(args.configfile)
notify_text_fmt = conf.get("timer", "text", fallback="[{time:%H:%M}] | {message}")
notify_command_fmtstr = conf.get(
    "timer", "command", fallback='notify-send -u critical "{text}"'
)

try:
    notify_command_fmt = shlex.split(notify_command_fmtstr)
except ValueError as err:
    print(
        "error in 'command' configuration: %s: %s" % (err, notify_command_fmtstr),
        file=sys.stderr,
    )
    sys.exit(1)

try:
    notify_text = notify_text_fmt.format(time=notify_time, message=args.message)
except ValueError as err:
    print(
        "error in 'text' configuration: %s: %s" % (err, notify_text_fmt),
        file=sys.stderr,
    )
    sys.exit(1)
try:
    notify_command = [
        arg.format(text=notify_text, time=notify_time, message=args.message)
        for arg in notify_command_fmt
    ]
except ValueError as err:
    print(
        "error in 'command' configuration: %s: %s" % (err, notify_command_fmt),
        file=sys.stderr,
    )
    sys.exit(1)

if not args.quiet:
    print("scheduled for {time:%H:%M}".format(time=notify_time))


# Fork and daemonize
if not args.foreground:
    import os, sys

    if os.fork() != 0:
        sys.exit(0)
    os.setsid()

sleep_until(notify_time)

try:
    subprocess.run(notify_command)
except Exception as err:
    print("failed to run 'notify' command: %s" % err, file=sys.stderr)
    sys.exit(1)
